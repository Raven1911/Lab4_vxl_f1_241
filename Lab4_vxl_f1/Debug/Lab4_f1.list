
Lab4_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001594  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001764  08001764  00002764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001794  08001794  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001794  08001794  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001794  08001794  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001794  08001794  00002794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001798  08001798  00002798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800179c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080017a8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080017a8  000030b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007505  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e8  00000000  00000000  0000a53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0000bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fc  00000000  00000000  0000c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fed3  00000000  00000000  0000cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1f6  00000000  00000000  0001ca0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000665c2  00000000  00000000  00026c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d1c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e4  00000000  00000000  0008d20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0008f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800174c 	.word	0x0800174c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	0800174c 	.word	0x0800174c

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f999 	bl	800054a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f804 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800021c:	f000 f900 	bl	8000420 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <main+0x10>

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fa5e 	bl	80016f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000252:	2300      	movs	r3, #0
 8000254:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fadc 	bl	8000818 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000266:	f000 f818 	bl	800029a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026e:	2300      	movs	r3, #0
 8000270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fd4a 	bl	8000d1c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028e:	f000 f804 	bl	800029a <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	@ 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800029e:	b672      	cpsid	i
}
 80002a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002a2:	bf00      	nop
 80002a4:	e7fd      	b.n	80002a2 <Error_Handler+0x8>
	...

080002a8 <timer_run>:
	timer_MUL[index] = duration/TIMER_CYCLE;
	flag_timer[index] = 0;
	timer_counter[index] = timer_MUL[index];
}

void timer_run(uint8_t index){
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	if(timer_counter[index] > 0){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <timer_run+0x58>)
 80002b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d01b      	beq.n	80002f6 <timer_run+0x4e>
		timer_counter[index]--;
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000300 <timer_run+0x58>)
 80002c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002c6:	3a01      	subs	r2, #1
 80002c8:	b291      	uxth	r1, r2
 80002ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <timer_run+0x58>)
 80002cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer_counter[index] <= 0){
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000300 <timer_run+0x58>)
 80002d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d10c      	bne.n	80002f6 <timer_run+0x4e>
			flag_timer[index] = 1;
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	4a09      	ldr	r2, [pc, #36]	@ (8000304 <timer_run+0x5c>)
 80002e0:	2101      	movs	r1, #1
 80002e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timer_counter[index] = timer_MUL[index];
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4907      	ldr	r1, [pc, #28]	@ (8000308 <timer_run+0x60>)
 80002ec:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80002f0:	4a03      	ldr	r2, [pc, #12]	@ (8000300 <timer_run+0x58>)
 80002f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
	}

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	2000003c 	.word	0x2000003c
 8000304:	20000028 	.word	0x20000028
 8000308:	20000050 	.word	0x20000050

0800030c <HAL_TIM_PeriodElapsedCallback>:

///////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800031c:	d10d      	bne.n	800033a <HAL_TIM_PeriodElapsedCallback+0x2e>
		for(int i = 0; i < 10; i++){
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e007      	b.n	8000334 <HAL_TIM_PeriodElapsedCallback+0x28>
			timer_run(i);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffbd 	bl	80002a8 <timer_run>
		for(int i = 0; i < 10; i++){
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	2b09      	cmp	r3, #9
 8000338:	ddf4      	ble.n	8000324 <HAL_TIM_PeriodElapsedCallback+0x18>
		}
		//getKeyInput();

	}

}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <HAL_MspInit+0x5c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a14      	ldr	r2, [pc, #80]	@ (80003a0 <HAL_MspInit+0x5c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <HAL_MspInit+0x5c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a0e      	ldr	r2, [pc, #56]	@ (80003a0 <HAL_MspInit+0x5c>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800036c:	61d3      	str	r3, [r2, #28]
 800036e:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800037a:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <HAL_MspInit+0x60>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	4a04      	ldr	r2, [pc, #16]	@ (80003a4 <HAL_MspInit+0x60>)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010000 	.word	0x40010000

080003a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <NMI_Handler+0x4>

080003b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <HardFault_Handler+0x4>

080003b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <MemManage_Handler+0x4>

080003c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <BusFault_Handler+0x4>

080003c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <UsageFault_Handler+0x4>

080003d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f8:	f000 f8e4 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}

08000400 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000404:	4802      	ldr	r0, [pc, #8]	@ (8000410 <TIM2_IRQHandler+0x10>)
 8000406:	f000 fe00 	bl	800100a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000064 	.word	0x20000064

08000414 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800043c:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_TIM2_Init+0x94>)
 800043e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000442:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_TIM2_Init+0x94>)
 8000446:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800044a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044c:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <MX_TIM2_Init+0x94>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000452:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_TIM2_Init+0x94>)
 8000454:	2209      	movs	r2, #9
 8000456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000458:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <MX_TIM2_Init+0x94>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <MX_TIM2_Init+0x94>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000464:	4813      	ldr	r0, [pc, #76]	@ (80004b4 <MX_TIM2_Init+0x94>)
 8000466:	f000 fd81 	bl	8000f6c <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000470:	f7ff ff13 	bl	800029a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <MX_TIM2_Init+0x94>)
 8000482:	f000 feb2 	bl	80011ea <HAL_TIM_ConfigClockSource>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800048c:	f7ff ff05 	bl	800029a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_TIM2_Init+0x94>)
 800049e:	f001 f8b1 	bl	8001604 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004a8:	f7ff fef7 	bl	800029a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000064 	.word	0x20000064

080004b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004c8:	d113      	bne.n	80004f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004ca:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <HAL_TIM_Base_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a0b      	ldr	r2, [pc, #44]	@ (80004fc <HAL_TIM_Base_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <HAL_TIM_Base_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	201c      	movs	r0, #28
 80004e8:	f000 f95f 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004ec:	201c      	movs	r0, #28
 80004ee:	f000 f978 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000500:	f7ff ff88 	bl	8000414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480b      	ldr	r0, [pc, #44]	@ (8000534 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000506:	490c      	ldr	r1, [pc, #48]	@ (8000538 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000508:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <LoopFillZerobss+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800051c:	4c09      	ldr	r4, [pc, #36]	@ (8000544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800052a:	f001 f8eb 	bl	8001704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff fe6f 	bl	8000210 <main>
  bx lr
 8000532:	4770      	bx	lr
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800053c:	0800179c 	.word	0x0800179c
  ldr r2, =_sbss
 8000540:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000544:	200000b0 	.word	0x200000b0

08000548 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_IRQHandler>

0800054a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054e:	2003      	movs	r0, #3
 8000550:	f000 f920 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000554:	200f      	movs	r0, #15
 8000556:	f000 f805 	bl	8000564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055a:	f7ff fef3 	bl	8000344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	bd80      	pop	{r7, pc}

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	@ (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f93b 	bl	80007fe <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f903 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000000 	.word	0x20000000
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000004 	.word	0x20000004

080005c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <HAL_IncTick+0x1c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <HAL_IncTick+0x20>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a03      	ldr	r2, [pc, #12]	@ (80005e4 <HAL_IncTick+0x20>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	20000008 	.word	0x20000008
 80005e4:	200000ac 	.word	0x200000ac

080005e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  return uwTick;
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <HAL_GetTick+0x10>)
 80005ee:	681b      	ldr	r3, [r3, #0]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	200000ac 	.word	0x200000ac

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4906      	ldr	r1, [pc, #24]	@ (8000694 <__NVIC_EnableIRQ+0x34>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	@ (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	@ (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	@ 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff90 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff2d 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff42 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff35 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e272      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 8087 	beq.w	8000946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000838:	4b92      	ldr	r3, [pc, #584]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 030c 	and.w	r3, r3, #12
 8000840:	2b04      	cmp	r3, #4
 8000842:	d00c      	beq.n	800085e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000844:	4b8f      	ldr	r3, [pc, #572]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 030c 	and.w	r3, r3, #12
 800084c:	2b08      	cmp	r3, #8
 800084e:	d112      	bne.n	8000876 <HAL_RCC_OscConfig+0x5e>
 8000850:	4b8c      	ldr	r3, [pc, #560]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800085c:	d10b      	bne.n	8000876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085e:	4b89      	ldr	r3, [pc, #548]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d06c      	beq.n	8000944 <HAL_RCC_OscConfig+0x12c>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d168      	bne.n	8000944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e24c      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800087e:	d106      	bne.n	800088e <HAL_RCC_OscConfig+0x76>
 8000880:	4b80      	ldr	r3, [pc, #512]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a7f      	ldr	r2, [pc, #508]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	e02e      	b.n	80008ec <HAL_RCC_OscConfig+0xd4>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10c      	bne.n	80008b0 <HAL_RCC_OscConfig+0x98>
 8000896:	4b7b      	ldr	r3, [pc, #492]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a7a      	ldr	r2, [pc, #488]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 800089c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	4b78      	ldr	r3, [pc, #480]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a77      	ldr	r2, [pc, #476]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e01d      	b.n	80008ec <HAL_RCC_OscConfig+0xd4>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80008b8:	d10c      	bne.n	80008d4 <HAL_RCC_OscConfig+0xbc>
 80008ba:	4b72      	ldr	r3, [pc, #456]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a71      	ldr	r2, [pc, #452]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	4b6f      	ldr	r3, [pc, #444]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a6e      	ldr	r2, [pc, #440]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	e00b      	b.n	80008ec <HAL_RCC_OscConfig+0xd4>
 80008d4:	4b6b      	ldr	r3, [pc, #428]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a6a      	ldr	r2, [pc, #424]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b68      	ldr	r3, [pc, #416]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a67      	ldr	r2, [pc, #412]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80008e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d013      	beq.n	800091c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f4:	f7ff fe78 	bl	80005e8 <HAL_GetTick>
 80008f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fa:	e008      	b.n	800090e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008fc:	f7ff fe74 	bl	80005e8 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b64      	cmp	r3, #100	@ 0x64
 8000908:	d901      	bls.n	800090e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800090a:	2303      	movs	r3, #3
 800090c:	e200      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090e:	4b5d      	ldr	r3, [pc, #372]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f0      	beq.n	80008fc <HAL_RCC_OscConfig+0xe4>
 800091a:	e014      	b.n	8000946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091c:	f7ff fe64 	bl	80005e8 <HAL_GetTick>
 8000920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000922:	e008      	b.n	8000936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000924:	f7ff fe60 	bl	80005e8 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b64      	cmp	r3, #100	@ 0x64
 8000930:	d901      	bls.n	8000936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000932:	2303      	movs	r3, #3
 8000934:	e1ec      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000936:	4b53      	ldr	r3, [pc, #332]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f0      	bne.n	8000924 <HAL_RCC_OscConfig+0x10c>
 8000942:	e000      	b.n	8000946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d063      	beq.n	8000a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000952:	4b4c      	ldr	r3, [pc, #304]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 030c 	and.w	r3, r3, #12
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00b      	beq.n	8000976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800095e:	4b49      	ldr	r3, [pc, #292]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 030c 	and.w	r3, r3, #12
 8000966:	2b08      	cmp	r3, #8
 8000968:	d11c      	bne.n	80009a4 <HAL_RCC_OscConfig+0x18c>
 800096a:	4b46      	ldr	r3, [pc, #280]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d116      	bne.n	80009a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000976:	4b43      	ldr	r3, [pc, #268]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <HAL_RCC_OscConfig+0x176>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d001      	beq.n	800098e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e1c0      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800098e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	4939      	ldr	r1, [pc, #228]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 800099e:	4313      	orrs	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a2:	e03a      	b.n	8000a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d020      	beq.n	80009ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ac:	4b36      	ldr	r3, [pc, #216]	@ (8000a88 <HAL_RCC_OscConfig+0x270>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b2:	f7ff fe19 	bl	80005e8 <HAL_GetTick>
 80009b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b8:	e008      	b.n	80009cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009ba:	f7ff fe15 	bl	80005e8 <HAL_GetTick>
 80009be:	4602      	mov	r2, r0
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d901      	bls.n	80009cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009c8:	2303      	movs	r3, #3
 80009ca:	e1a1      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0f0      	beq.n	80009ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4927      	ldr	r1, [pc, #156]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 80009e8:	4313      	orrs	r3, r2
 80009ea:	600b      	str	r3, [r1, #0]
 80009ec:	e015      	b.n	8000a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <HAL_RCC_OscConfig+0x270>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f4:	f7ff fdf8 	bl	80005e8 <HAL_GetTick>
 80009f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009fa:	e008      	b.n	8000a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009fc:	f7ff fdf4 	bl	80005e8 <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d901      	bls.n	8000a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e180      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1f0      	bne.n	80009fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d03a      	beq.n	8000a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d019      	beq.n	8000a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <HAL_RCC_OscConfig+0x274>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a34:	f7ff fdd8 	bl	80005e8 <HAL_GetTick>
 8000a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3a:	e008      	b.n	8000a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fdd4 	bl	80005e8 <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d901      	bls.n	8000a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e160      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_RCC_OscConfig+0x26c>)
 8000a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0f0      	beq.n	8000a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fa68 	bl	8000f30 <RCC_Delay>
 8000a60:	e01c      	b.n	8000a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <HAL_RCC_OscConfig+0x274>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a68:	f7ff fdbe 	bl	80005e8 <HAL_GetTick>
 8000a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6e:	e00f      	b.n	8000a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a70:	f7ff fdba 	bl	80005e8 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d908      	bls.n	8000a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e146      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	42420000 	.word	0x42420000
 8000a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	4b92      	ldr	r3, [pc, #584]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1e9      	bne.n	8000a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80a6 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aae:	4b8b      	ldr	r3, [pc, #556]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10d      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b88      	ldr	r3, [pc, #544]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a87      	ldr	r2, [pc, #540]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b85      	ldr	r3, [pc, #532]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad6:	4b82      	ldr	r3, [pc, #520]	@ (8000ce0 <HAL_RCC_OscConfig+0x4c8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d118      	bne.n	8000b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8000ce0 <HAL_RCC_OscConfig+0x4c8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8000ce0 <HAL_RCC_OscConfig+0x4c8>)
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aee:	f7ff fd7b 	bl	80005e8 <HAL_GetTick>
 8000af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af4:	e008      	b.n	8000b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af6:	f7ff fd77 	bl	80005e8 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	2b64      	cmp	r3, #100	@ 0x64
 8000b02:	d901      	bls.n	8000b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b04:	2303      	movs	r3, #3
 8000b06:	e103      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b08:	4b75      	ldr	r3, [pc, #468]	@ (8000ce0 <HAL_RCC_OscConfig+0x4c8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f0      	beq.n	8000af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <HAL_RCC_OscConfig+0x312>
 8000b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4a6e      	ldr	r2, [pc, #440]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6213      	str	r3, [r2, #32]
 8000b28:	e02d      	b.n	8000b86 <HAL_RCC_OscConfig+0x36e>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10c      	bne.n	8000b4c <HAL_RCC_OscConfig+0x334>
 8000b32:	4b6a      	ldr	r3, [pc, #424]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b34:	6a1b      	ldr	r3, [r3, #32]
 8000b36:	4a69      	ldr	r2, [pc, #420]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b38:	f023 0301 	bic.w	r3, r3, #1
 8000b3c:	6213      	str	r3, [r2, #32]
 8000b3e:	4b67      	ldr	r3, [pc, #412]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4a66      	ldr	r2, [pc, #408]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b44:	f023 0304 	bic.w	r3, r3, #4
 8000b48:	6213      	str	r3, [r2, #32]
 8000b4a:	e01c      	b.n	8000b86 <HAL_RCC_OscConfig+0x36e>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	d10c      	bne.n	8000b6e <HAL_RCC_OscConfig+0x356>
 8000b54:	4b61      	ldr	r3, [pc, #388]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	4a60      	ldr	r2, [pc, #384]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6213      	str	r3, [r2, #32]
 8000b60:	4b5e      	ldr	r3, [pc, #376]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b62:	6a1b      	ldr	r3, [r3, #32]
 8000b64:	4a5d      	ldr	r2, [pc, #372]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6213      	str	r3, [r2, #32]
 8000b6c:	e00b      	b.n	8000b86 <HAL_RCC_OscConfig+0x36e>
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	4a5a      	ldr	r2, [pc, #360]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b74:	f023 0301 	bic.w	r3, r3, #1
 8000b78:	6213      	str	r3, [r2, #32]
 8000b7a:	4b58      	ldr	r3, [pc, #352]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b7c:	6a1b      	ldr	r3, [r3, #32]
 8000b7e:	4a57      	ldr	r2, [pc, #348]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000b80:	f023 0304 	bic.w	r3, r3, #4
 8000b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d015      	beq.n	8000bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fd2b 	bl	80005e8 <HAL_GetTick>
 8000b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b94:	e00a      	b.n	8000bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b96:	f7ff fd27 	bl	80005e8 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d901      	bls.n	8000bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e0b1      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bac:	4b4b      	ldr	r3, [pc, #300]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0ee      	beq.n	8000b96 <HAL_RCC_OscConfig+0x37e>
 8000bb8:	e014      	b.n	8000be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bba:	f7ff fd15 	bl	80005e8 <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc0:	e00a      	b.n	8000bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fd11 	bl	80005e8 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e09b      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd8:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1ee      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d105      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bea:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a3b      	ldr	r2, [pc, #236]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8087 	beq.w	8000d0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c00:	4b36      	ldr	r3, [pc, #216]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d061      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d146      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c14:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <HAL_RCC_OscConfig+0x4cc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fce5 	bl	80005e8 <HAL_GetTick>
 8000c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c20:	e008      	b.n	8000c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c22:	f7ff fce1 	bl	80005e8 <HAL_GetTick>
 8000c26:	4602      	mov	r2, r0
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d901      	bls.n	8000c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c30:	2303      	movs	r3, #3
 8000c32:	e06d      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f0      	bne.n	8000c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c48:	d108      	bne.n	8000c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c4a:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4e:	f023 020f 	bic.w	r2, r3, #15
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4921      	ldr	r1, [pc, #132]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a19      	ldr	r1, [r3, #32]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	491b      	ldr	r1, [pc, #108]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_RCC_OscConfig+0x4cc>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fcb5 	bl	80005e8 <HAL_GetTick>
 8000c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c80:	e008      	b.n	8000c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c82:	f7ff fcb1 	bl	80005e8 <HAL_GetTick>
 8000c86:	4602      	mov	r2, r0
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e03d      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f0      	beq.n	8000c82 <HAL_RCC_OscConfig+0x46a>
 8000ca0:	e035      	b.n	8000d0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_RCC_OscConfig+0x4cc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fc9e 	bl	80005e8 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cb0:	f7ff fc9a 	bl	80005e8 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e026      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_RCC_OscConfig+0x4c4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f0      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x498>
 8000cce:	e01e      	b.n	8000d0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d107      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e019      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40007000 	.word	0x40007000
 8000ce4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_RCC_OscConfig+0x500>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d106      	bne.n	8000d0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d001      	beq.n	8000d0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e0a0      	b.n	8000e72 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d020      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d48:	4b4c      	ldr	r3, [pc, #304]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d60:	4b46      	ldr	r3, [pc, #280]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4a45      	ldr	r2, [pc, #276]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000d66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d6c:	4b43      	ldr	r3, [pc, #268]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4940      	ldr	r1, [pc, #256]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d040      	beq.n	8000e0c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d107      	bne.n	8000da2 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d92:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d115      	bne.n	8000dca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e067      	b.n	8000e72 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d107      	bne.n	8000dba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000daa:	4b34      	ldr	r3, [pc, #208]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e05b      	b.n	8000e72 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dba:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e053      	b.n	8000e72 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f023 0203 	bic.w	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	4929      	ldr	r1, [pc, #164]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ddc:	f7ff fc04 	bl	80005e8 <HAL_GetTick>
 8000de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000de2:	e00a      	b.n	8000dfa <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de4:	f7ff fc00 	bl	80005e8 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e03b      	b.n	8000e72 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 020c 	and.w	r2, r3, #12
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d1eb      	bne.n	8000de4 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d008      	beq.n	8000e2a <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4915      	ldr	r1, [pc, #84]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d009      	beq.n	8000e4a <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691b      	ldr	r3, [r3, #16]
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e4a:	f000 f81f 	bl	8000e8c <HAL_RCC_GetSysClockFreq>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_RCC_ClockConfig+0x160>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	4909      	ldr	r1, [pc, #36]	@ (8000e80 <HAL_RCC_ClockConfig+0x164>)
 8000e5c:	5ccb      	ldrb	r3, [r1, r3]
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_RCC_ClockConfig+0x168>)
 8000e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_RCC_ClockConfig+0x16c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb7a 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	08001764 	.word	0x08001764
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <HAL_RCC_GetSysClockFreq+0x90>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d002      	beq.n	8000ebc <HAL_RCC_GetSysClockFreq+0x30>
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d003      	beq.n	8000ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8000eba:	e026      	b.n	8000f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ebe:	613b      	str	r3, [r7, #16]
      break;
 8000ec0:	e026      	b.n	8000f10 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	0c9b      	lsrs	r3, r3, #18
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	4a16      	ldr	r2, [pc, #88]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00f      	beq.n	8000efa <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_RCC_GetSysClockFreq+0x90>)
 8000edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8000eec:	fb03 f202 	mul.w	r2, r3, r2
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e004      	b.n	8000f04 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000efe:	fb02 f303 	mul.w	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
      break;
 8000f08:	e002      	b.n	8000f10 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0x94>)
 8000f0c:	613b      	str	r3, [r7, #16]
      break;
 8000f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f10:	693b      	ldr	r3, [r7, #16]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	007a1200 	.word	0x007a1200
 8000f24:	08001774 	.word	0x08001774
 8000f28:	08001784 	.word	0x08001784
 8000f2c:	003d0900 	.word	0x003d0900

08000f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <RCC_Delay+0x34>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <RCC_Delay+0x38>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0a5b      	lsrs	r3, r3, #9
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f4c:	bf00      	nop
  }
  while (Delay --);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	60fa      	str	r2, [r7, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f9      	bne.n	8000f4c <RCC_Delay+0x1c>
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	20000000 	.word	0x20000000
 8000f68:	10624dd3 	.word	0x10624dd3

08000f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e041      	b.n	8001002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fa90 	bl	80004b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f000 fa08 	bl	80013c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d01b      	beq.n	800106e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f06f 0202 	mvn.w	r2, #2
 800103e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f998 	bl	800138a <HAL_TIM_IC_CaptureCallback>
 800105a:	e005      	b.n	8001068 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f98b 	bl	8001378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f99a 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01b      	beq.n	80010ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f06f 0204 	mvn.w	r2, #4
 800108a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2202      	movs	r2, #2
 8001090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f972 	bl	800138a <HAL_TIM_IC_CaptureCallback>
 80010a6:	e005      	b.n	80010b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f965 	bl	8001378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f974 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d01b      	beq.n	8001106 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f06f 0208 	mvn.w	r2, #8
 80010d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2204      	movs	r2, #4
 80010dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f94c 	bl	800138a <HAL_TIM_IC_CaptureCallback>
 80010f2:	e005      	b.n	8001100 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f93f 	bl	8001378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f94e 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d01b      	beq.n	8001152 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f06f 0210 	mvn.w	r2, #16
 8001122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2208      	movs	r2, #8
 8001128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f926 	bl	800138a <HAL_TIM_IC_CaptureCallback>
 800113e:	e005      	b.n	800114c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f919 	bl	8001378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f928 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00c      	beq.n	8001176 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f06f 0201 	mvn.w	r2, #1
 800116e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f8cb 	bl	800030c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00c      	beq.n	800119a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 faa4 	bl	80016e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00c      	beq.n	80011be <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80011b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f8f8 	bl	80013ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00c      	beq.n	80011e2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0320 	and.w	r3, r3, #32
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f06f 0220 	mvn.w	r2, #32
 80011da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 fa77 	bl	80016d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_TIM_ConfigClockSource+0x1c>
 8001202:	2302      	movs	r3, #2
 8001204:	e0b4      	b.n	8001370 <HAL_TIM_ConfigClockSource+0x186>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001224:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800122c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800123e:	d03e      	beq.n	80012be <HAL_TIM_ConfigClockSource+0xd4>
 8001240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001244:	f200 8087 	bhi.w	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 8001248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800124c:	f000 8086 	beq.w	800135c <HAL_TIM_ConfigClockSource+0x172>
 8001250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001254:	d87f      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 8001256:	2b70      	cmp	r3, #112	@ 0x70
 8001258:	d01a      	beq.n	8001290 <HAL_TIM_ConfigClockSource+0xa6>
 800125a:	2b70      	cmp	r3, #112	@ 0x70
 800125c:	d87b      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 800125e:	2b60      	cmp	r3, #96	@ 0x60
 8001260:	d050      	beq.n	8001304 <HAL_TIM_ConfigClockSource+0x11a>
 8001262:	2b60      	cmp	r3, #96	@ 0x60
 8001264:	d877      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 8001266:	2b50      	cmp	r3, #80	@ 0x50
 8001268:	d03c      	beq.n	80012e4 <HAL_TIM_ConfigClockSource+0xfa>
 800126a:	2b50      	cmp	r3, #80	@ 0x50
 800126c:	d873      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 800126e:	2b40      	cmp	r3, #64	@ 0x40
 8001270:	d058      	beq.n	8001324 <HAL_TIM_ConfigClockSource+0x13a>
 8001272:	2b40      	cmp	r3, #64	@ 0x40
 8001274:	d86f      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 8001276:	2b30      	cmp	r3, #48	@ 0x30
 8001278:	d064      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x15a>
 800127a:	2b30      	cmp	r3, #48	@ 0x30
 800127c:	d86b      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 800127e:	2b20      	cmp	r3, #32
 8001280:	d060      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x15a>
 8001282:	2b20      	cmp	r3, #32
 8001284:	d867      	bhi.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
 8001286:	2b00      	cmp	r3, #0
 8001288:	d05c      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x15a>
 800128a:	2b10      	cmp	r3, #16
 800128c:	d05a      	beq.n	8001344 <HAL_TIM_ConfigClockSource+0x15a>
 800128e:	e062      	b.n	8001356 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80012a0:	f000 f991 	bl	80015c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80012b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	609a      	str	r2, [r3, #8]
      break;
 80012bc:	e04f      	b.n	800135e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80012ce:	f000 f97a 	bl	80015c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012e0:	609a      	str	r2, [r3, #8]
      break;
 80012e2:	e03c      	b.n	800135e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012f0:	461a      	mov	r2, r3
 80012f2:	f000 f8f1 	bl	80014d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2150      	movs	r1, #80	@ 0x50
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f948 	bl	8001592 <TIM_ITRx_SetConfig>
      break;
 8001302:	e02c      	b.n	800135e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001310:	461a      	mov	r2, r3
 8001312:	f000 f90f 	bl	8001534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2160      	movs	r1, #96	@ 0x60
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f938 	bl	8001592 <TIM_ITRx_SetConfig>
      break;
 8001322:	e01c      	b.n	800135e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001330:	461a      	mov	r2, r3
 8001332:	f000 f8d1 	bl	80014d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2140      	movs	r1, #64	@ 0x40
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f928 	bl	8001592 <TIM_ITRx_SetConfig>
      break;
 8001342:	e00c      	b.n	800135e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f000 f91f 	bl	8001592 <TIM_ITRx_SetConfig>
      break;
 8001354:	e003      	b.n	800135e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
      break;
 800135a:	e000      	b.n	800135e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800135c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3b      	ldr	r2, [pc, #236]	@ (80014c0 <TIM_Base_SetConfig+0x100>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00b      	beq.n	80013f0 <TIM_Base_SetConfig+0x30>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013de:	d007      	beq.n	80013f0 <TIM_Base_SetConfig+0x30>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a38      	ldr	r2, [pc, #224]	@ (80014c4 <TIM_Base_SetConfig+0x104>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d003      	beq.n	80013f0 <TIM_Base_SetConfig+0x30>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a37      	ldr	r2, [pc, #220]	@ (80014c8 <TIM_Base_SetConfig+0x108>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d108      	bne.n	8001402 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <TIM_Base_SetConfig+0x100>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d017      	beq.n	800143a <TIM_Base_SetConfig+0x7a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001410:	d013      	beq.n	800143a <TIM_Base_SetConfig+0x7a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a2b      	ldr	r2, [pc, #172]	@ (80014c4 <TIM_Base_SetConfig+0x104>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00f      	beq.n	800143a <TIM_Base_SetConfig+0x7a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a2a      	ldr	r2, [pc, #168]	@ (80014c8 <TIM_Base_SetConfig+0x108>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00b      	beq.n	800143a <TIM_Base_SetConfig+0x7a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a29      	ldr	r2, [pc, #164]	@ (80014cc <TIM_Base_SetConfig+0x10c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <TIM_Base_SetConfig+0x7a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a28      	ldr	r2, [pc, #160]	@ (80014d0 <TIM_Base_SetConfig+0x110>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d003      	beq.n	800143a <TIM_Base_SetConfig+0x7a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a27      	ldr	r2, [pc, #156]	@ (80014d4 <TIM_Base_SetConfig+0x114>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d108      	bne.n	800144c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <TIM_Base_SetConfig+0x100>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00b      	beq.n	8001490 <TIM_Base_SetConfig+0xd0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <TIM_Base_SetConfig+0x10c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d007      	beq.n	8001490 <TIM_Base_SetConfig+0xd0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a13      	ldr	r2, [pc, #76]	@ (80014d0 <TIM_Base_SetConfig+0x110>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d003      	beq.n	8001490 <TIM_Base_SetConfig+0xd0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <TIM_Base_SetConfig+0x114>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d103      	bne.n	8001498 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	f023 0201 	bic.w	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]
  }
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40012c00 	.word	0x40012c00
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40000800 	.word	0x40000800
 80014cc:	40014000 	.word	0x40014000
 80014d0:	40014400 	.word	0x40014400
 80014d4:	40014800 	.word	0x40014800

080014d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	f023 0201 	bic.w	r2, r3, #1
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f023 030a 	bic.w	r3, r3, #10
 8001514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
 800151c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	621a      	str	r2, [r3, #32]
}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	f023 0210 	bic.w	r2, r3, #16
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800155e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	031b      	lsls	r3, r3, #12
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001570:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	621a      	str	r2, [r3, #32]
}
 8001588:	bf00      	nop
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	f043 0307 	orr.w	r3, r3, #7
 80015b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	609a      	str	r2, [r3, #8]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80015e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	021a      	lsls	r2, r3, #8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	609a      	str	r2, [r3, #8]
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001618:	2302      	movs	r3, #2
 800161a:	e04b      	b.n	80016b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001668:	d00e      	beq.n	8001688 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d009      	beq.n	8001688 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a13      	ldr	r2, [pc, #76]	@ (80016c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d004      	beq.n	8001688 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d10c      	bne.n	80016a2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800168e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	4313      	orrs	r3, r2
 8001698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40012c00 	.word	0x40012c00
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40000800 	.word	0x40000800
 80016cc:	40014000 	.word	0x40014000

080016d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <memset>:
 80016f4:	4603      	mov	r3, r0
 80016f6:	4402      	add	r2, r0
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d100      	bne.n	80016fe <memset+0xa>
 80016fc:	4770      	bx	lr
 80016fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001702:	e7f9      	b.n	80016f8 <memset+0x4>

08001704 <__libc_init_array>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	2600      	movs	r6, #0
 8001708:	4d0c      	ldr	r5, [pc, #48]	@ (800173c <__libc_init_array+0x38>)
 800170a:	4c0d      	ldr	r4, [pc, #52]	@ (8001740 <__libc_init_array+0x3c>)
 800170c:	1b64      	subs	r4, r4, r5
 800170e:	10a4      	asrs	r4, r4, #2
 8001710:	42a6      	cmp	r6, r4
 8001712:	d109      	bne.n	8001728 <__libc_init_array+0x24>
 8001714:	f000 f81a 	bl	800174c <_init>
 8001718:	2600      	movs	r6, #0
 800171a:	4d0a      	ldr	r5, [pc, #40]	@ (8001744 <__libc_init_array+0x40>)
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <__libc_init_array+0x44>)
 800171e:	1b64      	subs	r4, r4, r5
 8001720:	10a4      	asrs	r4, r4, #2
 8001722:	42a6      	cmp	r6, r4
 8001724:	d105      	bne.n	8001732 <__libc_init_array+0x2e>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	f855 3b04 	ldr.w	r3, [r5], #4
 800172c:	4798      	blx	r3
 800172e:	3601      	adds	r6, #1
 8001730:	e7ee      	b.n	8001710 <__libc_init_array+0xc>
 8001732:	f855 3b04 	ldr.w	r3, [r5], #4
 8001736:	4798      	blx	r3
 8001738:	3601      	adds	r6, #1
 800173a:	e7f2      	b.n	8001722 <__libc_init_array+0x1e>
 800173c:	08001794 	.word	0x08001794
 8001740:	08001794 	.word	0x08001794
 8001744:	08001794 	.word	0x08001794
 8001748:	08001798 	.word	0x08001798

0800174c <_init>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr

08001758 <_fini>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr
